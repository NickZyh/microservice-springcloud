<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--springboot-parent依赖-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.6.RELEASE</version>
        <!--表示引入parent - pom.xml文件的相对路径.默认值是../pom.xml,../表示当前文件夹的父文件夹;
         maven引入父pom的查找顺序为relativePath元素的指定地址(未指定则包含默认值) -> 本地仓库 -> 远程仓库;
         当设置为<relativePath/>时,表示空值,即始终从中央仓库获取该POM-->
        <relativePath/>
    </parent>

    <!--当前module的坐标,也是其他pom引入当前pom作为parent的坐标-->
    <groupId>com.springcloud</groupId>
    <artifactId>microservice-dependencies</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <!--打包类型为pom,表示能够作为父类pom文件被其他module引入-->
    <packaging>pom</packaging>
    <!--项目版本(语义化版本规范);RELEASE版本表示正式发布版;
    SNAPSHOT表示快照版,意味着该版本可能会经常更新,处于迭代状态-->
    <!--<version>1.0.0-SNAPSHOT</version>-->

    <!--项目的名称, Maven产生的文档用-->
    <name>microservice-dependencies</name>
    <!--项目主页的URL, Maven产生的文档用-->
    <!--<url>http://www.baidu.com/banseon</url>-->
    <!--项目的详细描述, Maven 产生的文档用-->
    <!--<description>spring-cloud demo</description>-->

    <!--指定项目的环境配置-->
    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!--spring cloud的依赖版本号,此处选择spring cloud的Finchley发行版本-->
        <!--properties中可以定义版本号,然后再当前pom文件中能够使用占位符引入这些版本号-->
        <spring-cloud.version>Finchley.RELEASE</spring-cloud.version>
    </properties>

    <!--表示对指定依赖进行管理,子模块不能直接继承该标签中的依赖;如果想要引入则需引入需要引进的依赖坐标,
    但是不需要引进版本,继承父pom的版本号由parent统一进行版本的依赖管理-->
    <dependencyManagement>
        <!--spring-cloud的依赖,各组件的版本能够直接点进spring-cloud-dependencies中查看-->
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <!--引入properties中的版本号-->
                <version>${spring-cloud.version}</version>
                <!--type和scope是Maven用来解决pom无法多继承的问题的;由于当前pom已经引入
                springboot作为parent-pom,所以无法直接再引入spring-cloud的依赖pom;
                <type>pom</type>:表示当前依赖为pom类型
                <scope>import</scope>:表示将上述pom引入到当前pom中
                一般来说,pom和import是联合使用,用于解决多继承问题-->
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--maven项目构建时的插件依赖配置;maven的生命周期都是以插件来支持的,常用插件如下,要注意的是,这里仅做展示,
    因为默认情况下IDEA会自带这些插件,但是如果我们想使用spring boot中版本一致的插件情况下,此时就需要手动引入,覆盖默认版本;
    spring boot中对于maven插件的版本也有管理,可以看到以下插件都没有设置版本号;实际上不配置也没事,只是说配置更好,所以不强求-->
    <build>
        <plugins>
            <!--编译插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <showWarnings>true</showWarnings>
                </configuration>
            </plugin>
            <!--打包成Jar的插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <addMavenDescriptor>false</addMavenDescriptor>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <configuration>
                            <archive>
                                <manifest>
                                    <!-- Add directory entries -->
                                    <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                                    <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                                    <addClasspath>true</addClasspath>
                                </manifest>
                            </archive>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- resource -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>

            <!-- install -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
            </plugin>

            <!-- clean -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
            </plugin>

            <!-- ant -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
            </plugin>

            <!-- dependency -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>
        </plugins>

        <!--同dependencyManagement的作用相同;要注意的是,直接plugins标注的插件表示引入该pom的pom能够直接继承,即能够直接使用-->
        <pluginManagement>
            <plugins>
                <!-- Java Document Generate -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <executions>
                        <execution>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- YUI Compressor (CSS/JS压缩) -->
                <plugin>
                    <groupId>net.alchim31.maven</groupId>
                    <artifactId>yuicompressor-maven-plugin</artifactId>
                    <version>1.5.1</version>
                    <executions>
                        <execution>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>compress</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <encoding>UTF-8</encoding>
                        <jswarn>false</jswarn>
                        <nosuffix>true</nosuffix>
                        <linebreakpos>30000</linebreakpos>
                        <force>true</force>
                        <includes>
                            <include>**/*.js</include>
                            <include>**/*.css</include>
                        </includes>
                        <excludes>
                            <exclude>**/*.min.js</exclude>
                            <exclude>**/*.min.css</exclude>
                        </excludes>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

<!--        -->
        <!--配置静态资源打包进Jar;因为maven打包是不会把资源文件(如html等静态资源)打包进Jar的,所以此处配置
        一下,将静态资源也全部进行打包-->
        <resources>
            <resource>
                <!--路径-->
                <directory>src/main/java</directory>
                <!--排除-->
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
            <resource>
                <!--排除-->
                <directory>src/main/resources</directory>
            </resource>
        </resources>
    </build>

    <!--依赖仓库配置,包括插件仓库,依赖仓库等-->

    <repositories>
        <!--配置maven远程仓库地址,加快导入依赖速度,以下为常用的仓库地址-->
        <repository>
            <id>aliyun-repos</id>
            <name>Aliyun Repository</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <!--是否每次访问仓库时都引入改变的snapshot版本的依赖;由于snapshot处于迭代器,通常来说为了保证依赖版本的稳定性
            不会每次访问Maven仓库都去更新snapshot的依赖版本-->
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>

        <repository>
            <id>sonatype-repos</id>
            <name>Sonatype Repository</name>
            <url>https://oss.sonatype.org/content/groups/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>sonatype-repos-s</id>
            <name>Sonatype Repository</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>

        <!--spring-snapshots依赖仓库;这个仓库表示引入spring中的snapshot版本的依赖,而由于snapshot的依赖都不会发行到
        Maven中央仓库(RELEASE才是发布版本),所以需要引入spring自己存放snapshot版本依赖的官方仓库,更新snapshot;这种情
        况一般出现于引入了snapshot版本的依赖时,但是一般来说我们都只使用正式发布版依赖,而不使用快照版依赖-->
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <!--插件仓库-->
    <pluginRepositories>
        <pluginRepository>
            <id>aliyun-repos</id>
            <name>Aliyun Repository</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>